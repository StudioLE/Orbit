type: virtual-machine
name: example-instance
devices:
  ext3:
    ipv6.address: '2001:db8::9'
    nictype: routed
    parent: eth0
    type: nic
    name: ext3
    hwaddr: 7C:62:7E:63:55:E5
  int3:
    ipv4.address: 10.0.3.9
    ipv6.address: 'fc00::0:3:9'
    network: br3
    type: nic
    name: int3
    hwaddr: 7C:62:7E:63:55:E5
config:
  limits.cpu: '2'
  limits.memory: 2GB
  cloud-init.network-config: |
    network:
      version: 2
      ethernets:
        ext3:
          dhcp4: no
          match:
            macaddress: 7C:62:7E:63:55:E5
          addresses:
          - 2001:db8::9/128
          nameservers:
            addresses:
            - 1.1.1.1
            - 1.0.0.1
            - 2606:4700:4700::1111
            - 2606:4700:4700::1001
          routes:
          - to: default
            via: '2001:db8::'
            metric: 10
            on-link: true
        int3:
          dhcp4: no
          match:
            macaddress: 7C:62:7E:63:55:E5
          addresses:
          - 10.0.3.9/24
          - fc00::0:3:9/112
          nameservers:
            addresses:
            - 10.0.3.2
            - fc00::0:3:2
          routes:
          - to: default
            via: 10.0.3.1
            metric: 20
          - to: default
            via: fc00::0:3:1
            metric: 20
  cloud-init.user-data: |
    #cloud-config

    packages:
    - resolvconf
    ssh_genkeytypes:
    - rsa
    - ed25519
    hostname: example-instance
    groups:
    - docker
    users:
    - name: admin
      groups: sudo, docker
      shell: /bin/bash
      sudo: ALL=(ALL) NOPASSWD:ALL
      lock_passwd: true
      ssh_authorized_keys: []
    - name: user
      shell: /bin/bash
      lock_passwd: true
      ssh_authorized_keys: []
    wireguard:
      interfaces:
      - name: wg3
        config_path: /etc/wireguard/wg3.conf
        content: |
          [Interface]
          ListenPort = 61003
          PrivateKey = 8Dh1P7/6fm9C/wHYzDrEhnyKmFgzL6yH6WuslXPLbVQ=
          Address = 10.1.3.9
          Address = fc00::1:3:9
          DNS = 10.1.3.2
          DNS = fc00::1:3:2

          [Peer]
          PublicKey = Rc9kAH9gclSHur2vbbmIj3pvWizuxB5ly1Drv0tRXRE=
          PreSharedKey = C/quZemAL04qz/eC+WIoelwa+H0oZSiYDSyHNvMVpsY=
          AllowedIPs = 10.1.3.0/24
          AllowedIPs = fc00::1:3:0/112
          Endpoint = 10.0.3.1:61003
          PersistentKeepAlive = 25
    write_files:
    - path: /etc/ssh/sshd_config
      append: true
      content: |
        Port 22

        # Sources:
        # https://www.digitalocean.com/community/tutorials/how-to-harden-openssh-on-ubuntu-20-04
        # https://blog.stribik.technology/2015/01/04/secure-secure-shell.html

        # Prevent a potential attacker from logging into your server directly as root. It also encourages good operational security practices on your part, such as operating as a non-privileged user and using sudo to escalate privileges only when absolutely needed.
        PermitRootLogin no

        # Limit the maximum number of authentication attempts for a particular login session by configuring the MaxAuthTries option:
        MaxAuthTries 3

        # Reduce the amount of time a user has to complete authentication after initially connecting to your SSH server. Setting this to a lower value helps to prevent certain denial-of-service attacks where multiple authentication sessions are kept open for a prolonged period of time.
        LoginGraceTime 20

        # If you have configured SSH keys for authentication, rather than using passwords, disable SSH password authentication to prevent leaked user passwords from allowing an attacker to log in:
        PasswordAuthentication no

        # As a further hardening measure related to passwords, you may also wish to disable authentication with empty passwords. This will prevent logins if a user’s password is set to a blank or empty value:
        PermitEmptyPasswords no

        # In the majority of use cases, SSH will be configured with public key authentication as the only in-use authentication method. However, OpenSSH server also supports many other authentication methods, some of which are enabled by default. If these are not required, you can disable them to further reduce the attack surface of your SSH server:
        ChallengeResponseAuthentication no
        KerberosAuthentication no
        GSSAPIAuthentication no

        # X11 forwarding allows for the display of remote graphical applications over an SSH connection, but this is rarely used in practice. Disable it if you are not running a graphical environment on your server:
        X11Forwarding no

        # OpenSSH server allows connecting clients to pass custom environment variables. For example, a client can attempt to set its own $PATH or to configure terminal settings. However, like X11 forwarding, these are not commonly used, so you can disable the option in most cases:
        PermitUserEnvironment no

        # Disable several miscellaneous options related to tunneling and forwarding if you won’t be using these on your server:
        AllowAgentForwarding no
        AllowTcpForwarding no
        PermitTunnel no

        # Disable the verbose SSH banner that is enabled by default, as it shows various information about your system, such as the operating system version:
        DebianBanner no

        # Restrict all users by IP
        #AllowUsers *@10.0.0.0/8

        # Disable weak key exchange
        # Provide forward secrecy. The server and the client will end up with a shared secret number at the end without a passive eavesdropper learning anything about this number. After we have a shared secret we have to derive a cryptographic key from this using a key derivation function.
        KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256

        # Disable weak server authentication
        # The server proves its identity to the client by signing the key resulting from the key exchange.
        Protocol 2
        HostKey /etc/ssh/ssh_host_ed25519_key
        HostKey /etc/ssh/ssh_host_rsa_key

        # Disable weak symmetric ciphers
        # Symmetric ciphers are used to encrypt the data after the initial key exchange and authentication is complete.
        Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr

        # Encryption provides confidentiality, message authentication code provides integrity.
        MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com
    - path: /var/lib/cloud/scripts/per-instance/30-orbit-configure
      permissions: 0o500
      content: |
        #!/bin/bash
        set -uo pipefail

        LOG_FILE="/var/log/orbit.log"

        log () {
          date --rfc-3339 ns | tr '\n' ' ' | sudo tee -a "${LOG_FILE}"
          echo "$1" | sudo tee -a "${LOG_FILE}"
        }

        echo-success () {
          echo -e "\e[32m ✔  $1\e[0m" >&2
        }

        echo-information () {
          echo -e "\e[34m ⓘ  $1\e[0m" >&2
        }

        echo-error () {
          echo -e "\e[31m !  $1\e[0m" >&2
        }

        echo-warning () {
          echo -e "\e[33m ⚠  $1\e[0m" >&2
        }

        echo-subsidiary () {
          echo -e "\e[37m    $1\e[0m" >&2
        }

        echo-step () {
          echo -e "\e[0m »  $1\e[0m" >&2
        }

        echo-break () {
          echo ""
        }

        echo-information "Starting Orbit configuration"
        log "Starting Orbit configuration"

        echo-step "Restarting SSH"
        if systemctl restart ssh
        then
          echo-success "Restarted SSH"
        else
          echo-error "Failed to restart SSH"
        fi

        echo-information "Completed Orbit configuration"
    - path: /var/lib/cloud/scripts/per-instance/50-orbit-install
      permissions: 0o500
      content: |
        #!/bin/bash
        set -uo pipefail

        LOG_FILE="/var/log/orbit.log"

        log () {
          date --rfc-3339 ns | tr '\n' ' ' | sudo tee -a "${LOG_FILE}"
          echo "$1" | sudo tee -a "${LOG_FILE}"
        }

        echo-success () {
          echo -e "\e[32m ✔  $1\e[0m" >&2
        }

        echo-information () {
          echo -e "\e[34m ⓘ  $1\e[0m" >&2
        }

        echo-error () {
          echo -e "\e[31m !  $1\e[0m" >&2
        }

        echo-warning () {
          echo -e "\e[33m ⚠  $1\e[0m" >&2
        }

        echo-subsidiary () {
          echo -e "\e[37m    $1\e[0m" >&2
        }

        echo-step () {
          echo -e "\e[0m »  $1\e[0m" >&2
        }

        echo-break () {
          echo ""
        }

        log "Installing bat"
        curl -fsS https://install.studiole.uk/bat | sudo bash

        log "Installing micro"
        curl -fsS https://install.studiole.uk/micro | sudo bash

        log "Installing figlet"
        curl -fsS https://install.studiole.uk/figlet | sudo bash

        log "Installing motd-hostname"
        curl -fsS https://install.studiole.uk/motd-hostname | sudo bash

        log "Installing motd-system"
        curl -fsS https://install.studiole.uk/motd-system | sudo bash

        log "Installing network-test"
        curl -fsS https://install.studiole.uk/network-test | sudo bash

        log "Installing upgrade-packages"
        curl -fsS https://install.studiole.uk/upgrade-packages | sudo bash
    - path: /var/lib/cloud/scripts/per-instance/70-orbit-run
      permissions: 0o500
      content: |
        #!/bin/bash
        set -uo pipefail

        LOG_FILE="/var/log/orbit.log"

        log () {
          date --rfc-3339 ns | tr '\n' ' ' | sudo tee -a "${LOG_FILE}"
          echo "$1" | sudo tee -a "${LOG_FILE}"
        }

        echo-success () {
          echo -e "\e[32m ✔  $1\e[0m" >&2
        }

        echo-information () {
          echo -e "\e[34m ⓘ  $1\e[0m" >&2
        }

        echo-error () {
          echo -e "\e[31m !  $1\e[0m" >&2
        }

        echo-warning () {
          echo -e "\e[33m ⚠  $1\e[0m" >&2
        }

        echo-subsidiary () {
          echo -e "\e[37m    $1\e[0m" >&2
        }

        echo-step () {
          echo -e "\e[0m »  $1\e[0m" >&2
        }

        echo-break () {
          echo ""
        }

        log "Running remote disable-motd"
        curl -fsS https://bash.studiole.uk/disable-motd | sudo bash

        log "Running local network-test"
        network-test

        log "Running local upgrade-packages"
        upgrade-packages
