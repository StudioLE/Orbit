## template: jinja
#cloud-config

# Jinja variables
{% set DOCKER_USER = "stivisto" %}
{% set SUDO_USER = "radiko" %}
{% set SSH_PORT = "4444" %}
{% set VM_ID = "201" %}

# Jinga shell shortcuts
{% set RUN_AS_DOCKER_USER = "ssh " ~ DOCKER_USER ~ "@localhost -p " ~ SSH_PORT ~ " -o StrictHostKeyChecking=no" %}

network:
  version: 2
  ethernets:
    eth0:
      addresses:
        - 10.10.10.201/24
      nameservers:
        addresses:
          - 10.10.10.1
          - 1.1.1.1
          - 213.186.33.99
        search:
          - local
      routes:
        - to: default
          via: 10.10.10.1

apt:
  preserve_sources_list: true

package_update: true
package_upgrade: true
package_reboot_if_required: true

packages:
  - uidmap

write_files:
  - path: /etc/ssh/sshd_config
    append: true
    content: |
      PermitRootLogin no
      PasswordAuthentication no
      Port {{ SSH_PORT }}

users:
  - name: {{ SUDO_USER }}
    groups: sudo
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
  - name: {{ DOCKER_USER }}
    shell: /bin/bash

runcmd:
  # Display variables
  - echo "DOCKER_USER = {{ DOCKER_USER }}"
  - echo "SUDO_USER = {{ SUDO_USER }}"
  - echo "SSH_PORT = {{ SSH_PORT }}"
  - echo "VOLUME_ID = {{ VOLUME_ID }}"
  - echo "VOLUME_FILE_SYSTEM = {{ VOLUME_FILE_SYSTEM }}"

  # Generate ssh key for root
  - < /dev/zero ssh-keygen -t ed25519 -q -N ''
  - echo ""
  - cat /root/.ssh/id_ed25519.pub >> /root/.ssh/authorized_keys

  # Copy root ssh keys to new users
  - mkdir -m 700 /home/{{ SUDO_USER }}/.ssh/
  - mkdir -m 700 /home/{{ DOCKER_USER }}/.ssh/
  - cp -r /root/.ssh/authorized_keys /home/{{ SUDO_USER }}/.ssh/
  - cp -r /root/.ssh/authorized_keys /home/{{ DOCKER_USER }}/.ssh/
  - chown -R {{ SUDO_USER }}:{{ SUDO_USER }} /home/{{ SUDO_USER }}/.ssh/
  - chown -R {{ DOCKER_USER }}:{{ DOCKER_USER }} /home/{{ DOCKER_USER }}/.ssh/

  # Configure volume
  # write_files is run before users hence why we set the permissions here
  - mkdir /srv
  - chown -R {{ DOCKER_USER }}:{{ DOCKER_USER }} /srv

  # Install docker rootless
  # Connect via ssh because sudo results in systemd error
  - {{ RUN_AS_DOCKER_USER }} 'curl -fsSL https://get.docker.com/rootless | sh'
  - sed -i '1iexport DOCKER_HOST=unix:///run/user/1001/docker.sock' /home/{{ DOCKER_USER }}/.bashrc

  # Setup docker
    - {{ RUN_AS_DOCKER_USER }} 'systemctl --user enable docker'
    - loginctl enable-linger {{ DOCKER_USER }}

  # Install docker-compose as {{ DOCKER_USER }}
  # - su - {{ DOCKER_USER }}
  - curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /home/{{ DOCKER_USER }}/bin/docker-compose
  - chmod +x /home/{{ DOCKER_USER }}/bin/docker-compose
  - chown {{ DOCKER_USER }}:{{ DOCKER_USER }} /home/{{ DOCKER_USER }}/bin/docker-compose

power_state:
  mode: reboot
  message: "Time for a fresh start"

bootcmd:
  - echo "Hello, world."
