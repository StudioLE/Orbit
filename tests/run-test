#!/bin/bash
set -uo pipefail

# ARGS

SCRIPT_FILE=${1}

# CONSTANTS

EXPECTED_FILE="/srv/tests/expected${SCRIPT_FILE}"
ACTUAL_FILE="/srv/tests/actual${SCRIPT_FILE}"

# VALIDATE

if [[ ! -f ${SCRIPT_FILE} ]];
then
  echo "❗  Invalid SCRIPT_FILE: ${SCRIPT_FILE}" >&2
  exit 1
fi

if [[ ! -f ${EXPECTED_FILE} ]];
then
  mkdir -p $(dirname "${EXPECTED_FILE}")
  touch "${EXPECTED_FILE}"
fi

if [[ ! -f ${ACTUAL_FILE} ]];
then
  mkdir -p $(dirname "${ACTUAL_FILE}")
  touch "${ACTUAL_FILE}"
fi

# START

# Detemine the arguments to use


if [[ "${SCRIPT_FILE}" == "/srv/lib/write-network-config" ]];
then

  ARGUMENTS="253"  
  "${SCRIPT_FILE}" "${ACTUAL_FILE}" "${ARGUMENTS}"

elif [[ "${SCRIPT_FILE}" == "/srv/lib/write-user-config" ]];
then

  ARGUMENTS="vm999"
  "${SCRIPT_FILE}" "${ACTUAL_FILE}" "${ARGUMENTS}"

elif [[ "${SCRIPT_FILE}" == "/srv/lib/args-hash-table" ]];
then

  ARGUMENTS=(--string "Hello, world!" --int 1 --flag --optional value /path/to/file path/to/file)
  # echo "$ARGUMENTS"
  "${SCRIPT_FILE}" "${ARGUMENTS[@]}" > "${ACTUAL_FILE}"

else
  echo "❗  Unknown SCRIPT_FILE: ${SCRIPT_FILE}" >&2
  exit 1
fi


SCRIPT_EXIT_CODE=$?
if [[ ${SCRIPT_EXIT_CODE} != 0 ]];
then
  echo "⚠️  Test failed. The script returned exit code: ${SCRIPT_EXIT_CODE}" >&2
  exit 1
fi

# Compare the expected and actual files. Store the exit code
cmp --silent -- "${EXPECTED_FILE}" "${ACTUAL_FILE}"
COMPARE_EXIT_CODE=$?

# Echo the status, the command and a diff if not matching
if [[ ${COMPARE_EXIT_CODE} == 0 ]];
then
  echo "✅  Test passed: ${SCRIPT_FILE}" 
else
  echo "❌  Test failed: Actual and expected did not match: ${SCRIPT_FILE}"
  /srv/tests/lib/diff-results "${EXPECTED_FILE}" "${ACTUAL_FILE}"
fi
