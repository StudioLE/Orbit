#!/bin/bash

# Exit on failure
set -e

# ARGS

MEMORY=${1}
CORES=${2}
DISK_SIZE=${3}
IMG_FILE=${4}
NAME=${5}
TAGS=${6}

# CONSTANTS

DIR="/root/infrastructure"
ID=$(pvesh get /cluster/nextid)
HOSTNAME="vm${ID}"
STORAGE_NAME="local"

# VALIDATE

if [[ "${ID}" = "" ||  "${ID}" -lt "100" || "${ID}" -gt "253" ]];
then
    echo "ERROR: Invalid ID: ${ID}"
    exit 1
fi

if [[ "${MEMORY}" = "" || "${MEMORY}" -lt "1" || "${MEMORY}" -gt "32" ]];
then
    echo "ERROR: Invalid MEMORY: ${MEMORY}"
    exit 1
else
    MEMORY=$((${MEMORY} * 1024))
fi

if [[ "${CORES}" = "" || "${CORES}" -lt "1" || "${CORES}" -gt "4" ]];
then
    echo "ERROR: Invalid CORES: ${CORES}"
    exit 1
fi

if [[ "${DISK_SIZE}" = "" ||  "${DISK_SIZE}" -lt "20" || "${DISK_SIZE}" -gt "4000" ]];
then
    echo "ERROR: Invalid DISK_SIZE: ${DISK_SIZE}"
    exit 1
else
    DISK_SIZE="${DISK_SIZE}G"
fi

if [[ "${IMG_FILE}" = "" || ! -f "${IMG_FILE}" ]];
then
    echo "ERROR: Invalid IMG_FILE: ${IMG_FILE}"
    exit 1
fi

if [[ "${NAME}" = "" ]];
then
    NAME="${HOSTNAME}"
fi

if [[ "${TAGS}" = "" ]];
then
    TAGS="unknown"
fi

# OUTPUT

echo "IMG_FILE: ${IMG_FILE}"
echo "ID: ${ID}"
echo "STORAGE_NAME: ${STORAGE_NAME}"
echo "MEMORY: ${MEMORY}"
echo "CORES: ${CORES}"
echo "DISK_SIZE: ${DISK_SIZE}"

# START

echo "##### Create a virtual machine"
qm create ${ID} --name ${NAME} --tags ${TAGS}
qm set ${ID} --memory ${MEMORY}
qm set ${ID} --sockets 1 --cores ${CORES}
qm set ${ID} --net0 virtio,bridge=vmbr0

echo "##### Import the disk into the proxmox storage"
qm importdisk ${ID} ${IMG_FILE} ${STORAGE_NAME}

echo "##### Add the imported disk to the VM"
qm set ${ID} \
    --scsihw virtio-scsi-pci \
    --scsi0 ${STORAGE_NAME}:${ID}/vm-${ID}-disk-0.raw

echo "##### Specify the boot disk"
qm set ${ID} --boot c --bootdisk scsi0

echo "##### Add support for VNC and a serial console"
qm set ${ID} --serial0 socket --vga serial0

echo "##### Add a CD-ROM for cloud-init"
qm set ${ID} --ide2 ${STORAGE_NAME}:cloudinit

echo "##### Set cloud-init"
qm set ${ID} --cicustom \
    "network=local:snippets/${ID}-network-config.yml,user=local:snippets/${ID}-user-config.yml"

echo "##### Write user config"
"${DIR}/lib/write-user-config" "/var/lib/vz/snippets/${ID}-user-config.yml" ${HOSTNAME} 

echo "##### Write network config"
"${DIR}/lib/write-network-config" "/var/lib/vz/snippets/${ID}-network-config.yml" ${ID}

echo "##### Resize boot disk"
qm disk resize ${ID} scsi0 ${DISK_SIZE}
